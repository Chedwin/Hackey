//// Template for creating a singleton class using a unique smart pointer ////

// NOTE: UNIQUE_PTR is macro-defined from std::unique_ptr<T> (#include <memory>)




// in .h file:
#define MACRO_NAME Class::GetSingletonInstance()

static Class* GetSingletonInstance();

static UNIQUE_PTR(Class) _ptrName;
friend DEFAULT_DELETE(Class);



// in .cpp:
UNIQUE_PTR(T) Class::_ptrName(nullptr); // Declare static unique pointer

Class* Class::GetSingletonInstance() {
	if (_ptrName.get() == nullptr) {
		_ptrName.reset(new Class());
	}
	return _ptrName.get();
}
